**1.0.0**

O!MyModels became a framework for transpailing code from one source to another.
Now you can plug-in your own parsers or model generators to work with O!MyModels.

From the box, right now supported generator for Pydantic & Dataclasses:
https://github.com/koxudaxi/datamodel-code-generator

To use it install omymodels with extras: pip install omymodels[datamodel].
After send argument `generator=datamodel` to cli or method.

## Improvements
# In basic
1. Field size now is described in `max_length` arg in Pydantic models and if coliumn has default, size or other properties - it will be described as Field in Pydantic model.
Issue: https://github.com/xnuinside/omymodels/issues/48


**v0.13.0**
## New feature

1. Added argument 'schema_global=' to support SQLAlchemy & Gino different table schemas https://github.com/xnuinside/omymodels/issues/41

**v0.12.1**
### Improvements

1. current_timestamp function processed now same was as "now()" function from ddl


**v0.12.0**
### Fixes
1. Now named arguments always went after positional. Fix for https://github.com/xnuinside/omymodels/issues/35

### New feature:
1. Availability to disable auto-name convertion - https://github.com/xnuinside/omymodels/issues/36. 
Now, if you want to keep names 1-to-1 as in your DDL file, you can set argument `no_auto_snake_case=True` and O!MyModels will do nothing with the table or column names.



**v0.11.1**

### Improvements:
1. added bytes type to pydantic - https://github.com/xnuinside/omymodels/pull/31
2. parser version updated to the latest 


**v0.11.0**

### Fixes:

1. MSSQL column & tables names in [] now is parsed validly  - https://github.com/xnuinside/omymodels/issues/28
2. names like 'users_WorkSchedule' now converted correctly to PascalCase like UsersWorkSchedule


**v0.10.1**
1. Update simple-ddl-parser version to 0.21.2


**v0.10.0**
### Improvements:
1. Meta models moved to separate package - https://github.com/xnuinside/table-meta
2. `common` module renamed to `from_ddl`, but anyway please use public API as imports from main module:

`from omymodels import create_models` or `from omymodels import convert_models`

### Fixes:

1. Fixed bunch of bugs in converter, but it stil in 'beta'.
2. Previously you can generate models if was any tables in ddl. Now you can also generate Enum models if in ddl you have only CREATE TYPE statements.
3. String enums now in any models types will be inherit from (str, Enum)


### Features:

1. Added converter feature to convert one model type to another (excluding SQLAlchemy Core (Tables)). 
Now with more tests for supported models, but still in Beta with bucnh of issues.

**v0.9.0**
Features:
1. Added beta models converter from one type of models to another.
To use models convertor:

```python
from omymodels import convert_models


models_from = """

class MaterialType(str, Enum):

    article = "article"
    video = "video"


@dataclass
class Material:

    id: int
    title: str
    description: str
    link: str
    type: MaterialType
    additional_properties: Union[dict, list]
    created_at: datetime.datetime
    updated_at: datetime.datetime

"""

result = convert_models(models_from, models_type="gino")
print(result)
```

where `models_type` - type of models that you want to get as a result

2. Now if O!MyModels does not know how to convert type - he just leave it as is.

Fixes:
1. In Dataclass & Pydantic generators now Decimals & Floats converted to float (previously was int).

**v0.8.4**
1. Now if tables was not found in input DDL - models generator raise NoTable error. if you want to have still silent exit if no tables, please use flag: exit_silent

**v0.8.3**
1. Added fundamental concept of TableMetaModel - class that unifies metadata parsed from different classes/ORM models types/DDLs to one standard to allow easy way convert one models to another
in next releases it will be used for converter from one type of models to another.
2. Fixed issue: https://github.com/xnuinside/omymodels/issues/18 "NOW() not recognized as now()"
3. Fixed issue: https://github.com/xnuinside/omymodels/issues/19 "Default value of now() always returns same time, use field for dataclass"

**v0.8.1**
1. Parser version is updated (fixed several issues with generation)
2. Fixed issue with Unique Constraint after schema in SQLAlchemy Core

**v0.8.0**
1. Fix --defaults-off flag in cli
2. Added support for SQLAlchemy Core Tables generating
3. Added examples folder in github `omymodels/example`
4. Fix issue with ForeignKey in SQLAlchemy

**v0.7.0**
1. Added generation for SQLAlchemy models (defaults from DDLs are setting up as 'server_default')
2. Added defaults for Pydantic models
3. Added flag to generate Pydantic & Dataclass models WITHOUT defaults `defaults_off=True` (by default it is False). And cli flag --defaults-off
4. Fixed issue with Enum types with lower case names in DDLs
5. Fixed several issues with Dataclass generation (default with datetime & Enums)
6. '"' do not remove from defaults now

**v0.6.0**
1. O!MyModels now also can generate python Dataclass from DDL. Use argument models_type='dataclass' or if you use the cli flag --models_type dataclass or -m dataclass
2. Added ForeignKey generation to GinoORM Models, added support for ondelete and onupdate

**v0.5.0**
1. Added Enums/IntEnums types for Gino & Pydantic
2. Added UUID type
3. Added key `schema_global` in create_models method (by default schema_global = True). 
If you set schema_global=False schema if it exists in ddl will be defined for each table (model) in table args.
This way you can have differen schemas per model (table). By default schema_global=True - this mean for all 
table only one schema and it is defined in `db = Gino(schema="prefix--schema-name")`.
4. If column is a primary key (primary_key=True) nullable argument not showed, because primary keys always are not null.
5. To cli was added flag '--no-global-schema' to set schema in table_args.

**v0.4.1**
1. Added correct work with table names contains multiple '-'

**v0.4.0**
1. Added generation for Pydantic models from ddl
2. Main method create_gino_models renamed to create_models

**v0.3.0**
1. Generated Index for 'index' statement in __table_args__ (not unique constrait as previously)
2. Fix issue with column size as tuple (4,2)

**v0.2.0**
1. Valid generating columns in models: autoincrement, default, type, arrays, unique, primary key and etc.
2. Added creating __table_args__ for indexes
